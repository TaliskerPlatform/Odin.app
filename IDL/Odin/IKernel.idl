cpp_quote("/* Odin: The Talisker nanokernel */");
cpp_quote("");
cpp_quote("/* Copyright 2017 Mo McRoberts.");
cpp_quote(" *");
cpp_quote(" *  Licensed under the Apache License, Version 2.0 (the \"License\");");
cpp_quote(" *  you may not use this file except in compliance with the License.");
cpp_quote(" *  You may obtain a copy of the License at");
cpp_quote(" *");
cpp_quote(" *      http://www.apache.org/licenses/LICENSE-2.0");
cpp_quote(" *");
cpp_quote(" *  Unless required by applicable law or agreed to in writing, software");
cpp_quote(" *  distributed under the License is distributed on an \"AS IS\" BASIS,");
cpp_quote(" *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
cpp_quote(" *  See the License for the specific language governing permissions and");
cpp_quote(" *  limitations under the License.");
cpp_quote(" */");

import "IObject.idl";
import "IMemoryManager.idl";
import "IAllocator.idl";

[
	object,
	uuid(22d03407-2fe7-4358-a95f-925f3ed83617),
	pointer_default(unique),
	cheader("Odin/IKernel.h")
]
interface IKernel: IObject
{	
	cpp_quote("#ifndef W_NO_UNSTABLE_INTERFACES");
	cpp_quote("# warning The IKernel interface is currently considered unstable; source and binary compatibility is not assured.");
	cpp_quote("#endif");
	
	[local] int mm([out] IMemoryManager **intf);
	[local] int allocator([out] IAllocator **intf);
	
	/* Allocate kernel heap using the current allocator */
	[local] void *alloc([in] size_t nbytes);
	
	/* Free some memory, providing the owner of the region is an IAllocator
	 * (which will always be true for blocks allocated by an allocator)
	 */
	[local] int free([in] void *ptr);
}
